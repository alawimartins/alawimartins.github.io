{"version":3,"sources":["noteComponents/Form/Form.js","noteComponents/Note/Note.js","noteComponents/Lists/List.js","noteComponents/App/App.js","serviceWorker.js","index.js"],"names":["Form","props","state","comments","event","textValue","this","onClicked","console","log","preventDefault","setState","target","value","className","onClick","exitTextArea","bind","onSubmit","onClickEvent","placeholder","onChange","onTextAreaChange","maxLength","React","Component","Note","color","text","onDelete","id","List","noteId","closeButton","lists","map","eachNote","i","deleteNote","App","currentUrl","window","location","href","notes","URL","searchParams","get","obj","JSON","parse","notesArr","form","newNotes","splice","length","colors","c","Math","floor","random","onNoteClose","infoHasBeenSent","toggleForm","rotation","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fbef1eb5.chunk.js","sourcesContent":["import React from 'react';\nimport './Form.css';\n\nexport class Form extends React.Component {\n  constructor(props){\n    super(props)\n    //onClicked\n    //exitTextArea : function\n    this.state = {comments: \"\"}\n\n  }\n\n  onClickEvent(event) {\n    const textValue = this.state.comments\n    this.props.onClicked(textValue)\n    console.log(textValue,\"textValue\")\n    event.preventDefault()\n    this.setState({comments: \"\"})\n  }\n\n  onTextAreaChange (event) {\n    this.setState ({comments: event.target.value })\n  }\n\n  \n\n  render(){\n    console.log(this.state.comments)\n    return (\n      <>\n        <div className =\"backgroundWhite\" onClick = {this.props.exitTextArea.bind(this)}>\n        </div>\n        <div className =\"backgroundNote\">\n\n          <form onSubmit={this.onClickEvent.bind(this)} className=\"backgroundNote__container\">\n          <textarea value={this.state.comments} placeholder=\"Write your note here!\" onChange={this.onTextAreaChange.bind(this)} maxLength = \"200\" className=\"backgroundNote__textarea\" ></textarea>\n            <div><button className=\"backgroundNote__button\" >Send</button></div>\n          </form>\n          \n        </div>\n      </>\n      \n        \n        \n     \n      \n\n    );\n  }\n}","import React from 'react';\nimport './index.css'\n\n\nexport class Note extends React.Component {\n  constructor(props){\n    super(props)\n\n    //text : string\n    //onDelete : function\n    //id : number\n\n  }\n\n\n\n  render(){\n    return (\n        <div>\n            <div className={\"noteContainer noteContainer--\" + this.props.color}>\n                <p className=\"noteContainer__text\">{this.props.text}</p>\n                <div><p onClick = {this.props.onDelete.bind(this, this.props.id)} className=\"noteContainer__deletebtn\">X</p></div>\n                \n            </div>\n            \n         \n           \n      </div>\n    );\n  }\n}","import React from 'react';\nimport {Note} from '../Note/Note'\nimport './index.css'\n\nexport class List extends React.Component {\n  constructor(props){\n    super(props)\n\n    //lists : array\n    //closeButton : function\n\n  }\n\n  deleteNote(noteId) {\n    this.props.closeButton(noteId)\n  }\n\n  render(){\n    return (\n        <div>\n            <div className = \"notesContainer\">{this.props.lists.map(function (eachNote, i){\n\n                return <Note text={eachNote.text} color={eachNote.color} id={i} onDelete={this.deleteNote.bind(this)} />\n            }.bind(this))}\n            </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport './App.css';\nimport {Form} from '../Form/Form'\nimport {List} from '../Lists/List'\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n\n    const currentUrl = window.location.href;\n    const url = new URL(currentUrl);\n    const notes = url.searchParams.get(\"notes\");\n\n\n    // const notesToConvert = [\n    //   {\n    //     text: 'Hi! This project uses React.js',\n    //     color: 'note1',\n    //   },\n    //   {\n    //     text: 'Use the + button to add a note :)',\n    //     color: 'note2',\n    //   },\n    //   {\n    //     text: 'I am looking for a front-end junior position.',\n    //     color: 'note3',\n    //   }, \n    //   {\n    //     text: 'Here is my email: yasmin.gt@gmail.com and my phone number: 0446574626',\n    //     color: 'note4',\n    //   },\n    //   {\n    //     text: 'Looking forward to hearing from you :D',\n    //     color: 'note',\n    //   } \n    // ] \n\n    // const string = JSON.stringify(notesToConvert);\n\n    // console.log('string', string);\n    console.log('notes', notes);\n    const obj = JSON.parse(notes)\n    console.log('obj', obj);\n\n\n    this.state= {notesArr: obj || [], form: false}\n  }\n\n  onNoteClose(noteId) {\n    // const newNotes = this.state.notesArr.filter(function (note) {\n    //   if(note !== eachNote) {\n    //     return true\n    //   }\n    // })\n\n    const newNotes = [...this.state.notesArr];\n    newNotes.splice(noteId, 1);\n\n    this.setState({notesArr : newNotes})\n  }\n  \n  \n  infoHasBeenSent (textValue) {\n    if(textValue.length ===  0) {\n      return\n    }\n    const colors = ['note', 'note1', 'note2','note3','note4'];\n    const c = colors[Math.floor(Math.random() * colors.length)];\n    const newNotes = [...this.state.notesArr, \n      {\n        text: textValue,\n        color: c\n      }]\n\n    this.setState({\n      notesArr: newNotes,\n      \n    })\n  }\n\n  toggleForm() {\n    // this.state.form ? this.setState ({form : false}) : this.setState ({form : true})\n    this.setState ({form : !this.state.form})\n  }\n\n  rotation() {\n    if (this.state.form) {\n      return \"Exit\"\n    } {\n      return \"Open\"\n    }\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        <h1 className= \"title\">My Notes</h1>\n        {this.state.notesArr.length ===0 && <h2 className=\"subtitle\">Click On The Plus Button</h2>}\n        \n        <List lists={this.state.notesArr} closeButton={this.onNoteClose.bind(this)} />\n        {this.state.form && <Form onClicked = {this.infoHasBeenSent.bind(this)} exitTextArea = {this.toggleForm.bind(this)}/> }\n        \n        <a onClick={this.toggleForm.bind(this)}   href=\"#\" className={\"btn btn\" + this.rotation()}  >+</a>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './noteComponents/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}